#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('tieuquetu:server');
const http = require('http');
// const WebSocket = require('../ws');
// const vhostConnect = require('../vhost-connect');
const connect = require('connect');
const vhost = require('vhost');
// const WPCMS = require('../wp-cms');
require('dotenv').config()
const { port } = require('../inc/config');

/**
 * Get port from environment and store in Express.
 */

// const port = normalizePort(( dev ? process.env.DEV_PORT : process.env.PORT ) || 3000 );
app.set('port', port);
// vhostConnect.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Create Websocket server.
 */
// WebSocket(server);

/**
 * Generating graphql possibleTypes automatically
 */
// WPCMS.init();

// const appWithVhost = connect();

// appWithVhost.use(vhost('drinkocany.com', (req, res)=>{
//   server.emit('request', req, res);
// }));


/**
 * Listen on provided port, on all network interfaces.
 */

/* istanbul ignore next */
if (!module.parent) {
  server.listen(port);
} else {
  server.listen(port);
}

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
